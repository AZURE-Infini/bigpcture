# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: terraform

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
      
    steps:
     # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
            
      - name: Replace tokens
        uses: cschleiden/replace-tokens@v1.1
        with:
          tokenPrefix: '#{'
          tokenSuffix: '}#'
          files: '[ "${{env.working-directory}}/*.tf" ]'
        env: 
          SP_IAC_LANDING_ZONE_NPRD_ID: ${{secrets.SP_IAC_LANDING_ZONE_NPRD_ID}}
          SP_IAC_LANDING_ZONE_NPRD_SECRET: ${{secrets.SP_IAC_LANDING_ZONE_NPRD_SECRET}}
     

      - name: Terraform init
        id: init 
        run: terraform init
        working-directory: ./${{ env.working-directory }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID}}
          ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
          ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
          ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}

      - name: Terraform Validate
        id: Validate
        working-directory: ./${{ env.working-directory }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./${{ env.working-directory }}
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID}}
          ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
          ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
          ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}

      - name: create body for plan
        uses: actions/github-script@v6
        id: body-plan
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ./${{ env.working-directory }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: terraform apply -auto-approve -input=false
